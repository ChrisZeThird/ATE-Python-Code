# -*- coding: utf-8 -*-
"""
Created on Thu Feb 24 14:54:12 2022

@author: ChrisZeThird

This script shows us if in the Rayleigh expression of scattered light intensity, we have a proportional relationship between
the ratio of I, the intensity measured after a diffusing medium, and I0, the original light intensity; and the wavelength.
"""

import numpy as np
import matplotlib.pyplot as plt
import glob
import os

""""Importing the data"""
path = input('Enter files path: ') # Gets path to access the correct files
files = []
for file in glob.glob(f'{path}\*.txt'):
    arr = np.loadtxt(file, unpack=True)
    name = (os.path.basename(file))[:-4] # Gets the label for the legend without the extension of the file
    name = name.replace('_copy', '')
    files.append((arr,name))

"""Parameters"""

radius = 11e-9 #m
#radius_arr = np.linspace(start=7, stop=15, num=18) #range of radius
distance = 2.73e-7 #m distance between particles

wavelengths = np.array([435, 540, 634]) #Blue/Green/Red
log_wv = np.log(wavelengths)

# The few lines below are very specific to the files, and the filters used during the experiment. The values are presented in 'wavelengths' above
# The values are the Intensity for a specific wavelength
I_blue = (files[1][0])[1][435]
I_green = (files[3][0])[1][540]
I_red = (files[2][0])[1][634]
I0 = (files[4][0])[1]

I0_list = [I0[435], I0[540], I0[634]]

# """Some useful functions"""

# def Rayleigh_Intensity(R,Lambda,d):
#     """
#     Angle Theta is 0
#     Parameters
#     ----------
#     R : Distance between particles
#     Lambda : Wavelength
#     d : diameter

#     Returns
#     -------
#     I/I0 based on Rayleigh's formula
#     """
#     a = 2/(2*R**2)
#     b = ((2*np.pi)/Lambda)**4
#     c = (d/2)**6
#     return a*b*c

""""Calculating ratios"""

R_blue = I_blue/I0_list[0]
R_green = I_green/I0_list[1]
R_red = I_red/I0_list[2]

Ratios = [R_blue, R_green, R_red]
log_R= np.log(Ratios)

"""Ploting results"""

fig = plt.figure(figsize=(16,9))

plt.plot(log_wv, log_R, 'o')
plt.xlabel('log of wavelength')
plt.ylabel('Ratio I/I0')

z = np.polyfit(log_wv, log_R, 1)
p = np.poly1d(z)
plt.plot(log_wv,p(log_wv),"r--")
plt.title("Trend curve: y=%.6fx+%.6f"%(z[0],z[1])) 

plt.show()

    
